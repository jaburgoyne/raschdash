// Generated by rstantools.  Do not edit by hand.

/*
    raschdash is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    raschdash is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with raschdash.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_raschdash_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_raschdash");
    reader.add_event(182, 180, "end", "model_raschdash");
    return reader;
}
template <bool propto, typename T1__>
typename boost::math::tools::promote_args<T1__>::type
rsm_lpmf(const int& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& beta_raw, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 8;
        int K(0);
        (void) K;  // dummy to suppress unused var warning
        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,num_elements(beta_raw));
        current_statement_begin__ = 9;
        validate_non_negative_index("beta", "(K + 1)", (K + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta((K + 1));
        stan::math::initialize(beta, DUMMY_VAR__);
        stan::math::fill(beta, DUMMY_VAR__);
        stan::math::assign(beta,append_row(0, cumulative_sum(beta_raw)));
        current_statement_begin__ = 10;
        return stan::math::promote_scalar<fun_return_scalar_t__>(categorical_logit_log((y + 1), beta));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T1__>
typename boost::math::tools::promote_args<T1__>::type
rsm_lpmf(const int& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& beta_raw, std::ostream* pstream__) {
    return rsm_lpmf<false>(y,beta_raw, pstream__);
}
struct rsm_lpmf_functor__ {
    template <bool propto, typename T1__>
        typename boost::math::tools::promote_args<T1__>::type
    operator()(const int& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& beta_raw, std::ostream* pstream__) const {
        return rsm_lpmf(y, beta_raw, pstream__);
    }
};
template <typename T0__, class RNG>
int
rsm_rng(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta_raw, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 13;
        int K(0);
        (void) K;  // dummy to suppress unused var warning
        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,num_elements(beta_raw));
        current_statement_begin__ = 14;
        validate_non_negative_index("beta", "(K + 1)", (K + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta((K + 1));
        stan::math::initialize(beta, DUMMY_VAR__);
        stan::math::fill(beta, DUMMY_VAR__);
        stan::math::assign(beta,append_row(0, cumulative_sum(beta_raw)));
        current_statement_begin__ = 15;
        return stan::math::promote_scalar<fun_return_scalar_t__>((categorical_logit_rng(beta, base_rng__) - 1));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct rsm_rng_functor__ {
    template <typename T0__, class RNG>
        int
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta_raw, RNG& base_rng__, std::ostream* pstream__) const {
        return rsm_rng(beta_raw, base_rng__, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_raschdash
  : public stan::model::model_base_crtp<model_raschdash> {
private:
        int L;
        int I;
        int K;
        int M;
        int N;
        int O;
        std::vector<int> mm;
        std::vector<int> nn;
        std::vector<int> ll;
        std::vector<int> ii;
        std::vector<int> kk;
        std::vector<int> y;
public:
    model_raschdash(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_raschdash(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_raschdash_namespace::model_raschdash";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            check_greater_or_equal(function__, "L", L, 1);
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "I", "int", context__.to_vec());
            I = int(0);
            vals_i__ = context__.vals_i("I");
            pos__ = 0;
            I = vals_i__[pos__++];
            check_greater_or_equal(function__, "I", I, 1);
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 1);
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "O", "int", context__.to_vec());
            O = int(0);
            vals_i__ = context__.vals_i("O");
            pos__ = 0;
            O = vals_i__[pos__++];
            check_greater_or_equal(function__, "O", O, 1);
            current_statement_begin__ = 27;
            validate_non_negative_index("mm", "N", N);
            context__.validate_dims("data initialization", "mm", "int", context__.to_vec(N));
            mm = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("mm");
            pos__ = 0;
            size_t mm_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < mm_k_0_max__; ++k_0__) {
                mm[k_0__] = vals_i__[pos__++];
            }
            size_t mm_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < mm_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mm[i_0__]", mm[i_0__], 1);
                check_less_or_equal(function__, "mm[i_0__]", mm[i_0__], M);
            }
            current_statement_begin__ = 28;
            validate_non_negative_index("nn", "O", O);
            context__.validate_dims("data initialization", "nn", "int", context__.to_vec(O));
            nn = std::vector<int>(O, int(0));
            vals_i__ = context__.vals_i("nn");
            pos__ = 0;
            size_t nn_k_0_max__ = O;
            for (size_t k_0__ = 0; k_0__ < nn_k_0_max__; ++k_0__) {
                nn[k_0__] = vals_i__[pos__++];
            }
            size_t nn_i_0_max__ = O;
            for (size_t i_0__ = 0; i_0__ < nn_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "nn[i_0__]", nn[i_0__], -(M));
                check_less_or_equal(function__, "nn[i_0__]", nn[i_0__], N);
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("ll", "I", I);
            context__.validate_dims("data initialization", "ll", "int", context__.to_vec(I));
            ll = std::vector<int>(I, int(0));
            vals_i__ = context__.vals_i("ll");
            pos__ = 0;
            size_t ll_k_0_max__ = I;
            for (size_t k_0__ = 0; k_0__ < ll_k_0_max__; ++k_0__) {
                ll[k_0__] = vals_i__[pos__++];
            }
            size_t ll_i_0_max__ = I;
            for (size_t i_0__ = 0; i_0__ < ll_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ll[i_0__]", ll[i_0__], 1);
                check_less_or_equal(function__, "ll[i_0__]", ll[i_0__], L);
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("ii", "O", O);
            context__.validate_dims("data initialization", "ii", "int", context__.to_vec(O));
            ii = std::vector<int>(O, int(0));
            vals_i__ = context__.vals_i("ii");
            pos__ = 0;
            size_t ii_k_0_max__ = O;
            for (size_t k_0__ = 0; k_0__ < ii_k_0_max__; ++k_0__) {
                ii[k_0__] = vals_i__[pos__++];
            }
            size_t ii_i_0_max__ = O;
            for (size_t i_0__ = 0; i_0__ < ii_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ii[i_0__]", ii[i_0__], 1);
                check_less_or_equal(function__, "ii[i_0__]", ii[i_0__], I);
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("kk", "I", I);
            context__.validate_dims("data initialization", "kk", "int", context__.to_vec(I));
            kk = std::vector<int>(I, int(0));
            vals_i__ = context__.vals_i("kk");
            pos__ = 0;
            size_t kk_k_0_max__ = I;
            for (size_t k_0__ = 0; k_0__ < kk_k_0_max__; ++k_0__) {
                kk[k_0__] = vals_i__[pos__++];
            }
            size_t kk_i_0_max__ = I;
            for (size_t i_0__ = 0; i_0__ < kk_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "kk[i_0__]", kk[i_0__], 1);
            }
            current_statement_begin__ = 37;
            validate_non_negative_index("y", "O", O);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(O));
            y = std::vector<int>(O, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = O;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            size_t y_i_0_max__ = O;
            for (size_t i_0__ = 0; i_0__ < y_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y[i_0__]", y[i_0__], 0);
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 43;
            num_params_r__ += 1;
            current_statement_begin__ = 44;
            validate_non_negative_index("epsilon_raw", "L", L);
            num_params_r__ += L;
            current_statement_begin__ = 45;
            validate_non_negative_index("upsilon_raw", "I", I);
            num_params_r__ += I;
            current_statement_begin__ = 46;
            num_params_r__ += 1;
            current_statement_begin__ = 47;
            validate_non_negative_index("d_tau_err", "std::max(0, (K - 2))", std::max(0, (K - 2)));
            num_params_r__ += std::max(0, (K - 2));
            current_statement_begin__ = 50;
            validate_non_negative_index("xi_raw", "M", M);
            num_params_r__ += M;
            current_statement_begin__ = 51;
            validate_non_negative_index("zeta_raw", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 52;
            num_params_r__ += 1;
            current_statement_begin__ = 53;
            num_params_r__ += 1;
            current_statement_begin__ = 54;
            num_params_r__ += 1;
            current_statement_begin__ = 55;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_raschdash() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 43;
        if (!(context__.contains_r("nu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "nu", "double", context__.to_vec());
        double nu(0);
        nu = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(nu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 44;
        if (!(context__.contains_r("epsilon_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable epsilon_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("epsilon_raw");
        pos__ = 0U;
        validate_non_negative_index("epsilon_raw", "L", L);
        context__.validate_dims("parameter initialization", "epsilon_raw", "vector_d", context__.to_vec(L));
        Eigen::Matrix<double, Eigen::Dynamic, 1> epsilon_raw(L);
        size_t epsilon_raw_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < epsilon_raw_j_1_max__; ++j_1__) {
            epsilon_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(epsilon_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable epsilon_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 45;
        if (!(context__.contains_r("upsilon_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable upsilon_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("upsilon_raw");
        pos__ = 0U;
        validate_non_negative_index("upsilon_raw", "I", I);
        context__.validate_dims("parameter initialization", "upsilon_raw", "vector_d", context__.to_vec(I));
        Eigen::Matrix<double, Eigen::Dynamic, 1> upsilon_raw(I);
        size_t upsilon_raw_j_1_max__ = I;
        for (size_t j_1__ = 0; j_1__ < upsilon_raw_j_1_max__; ++j_1__) {
            upsilon_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(upsilon_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable upsilon_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 46;
        if (!(context__.contains_r("d_tau_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable d_tau_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("d_tau_raw");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "d_tau_raw", "double", context__.to_vec());
        double d_tau_raw(0);
        d_tau_raw = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(d_tau_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable d_tau_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 47;
        if (!(context__.contains_r("d_tau_err")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable d_tau_err missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("d_tau_err");
        pos__ = 0U;
        validate_non_negative_index("d_tau_err", "std::max(0, (K - 2))", std::max(0, (K - 2)));
        context__.validate_dims("parameter initialization", "d_tau_err", "vector_d", context__.to_vec(std::max(0, (K - 2))));
        Eigen::Matrix<double, Eigen::Dynamic, 1> d_tau_err(std::max(0, (K - 2)));
        size_t d_tau_err_j_1_max__ = std::max(0, (K - 2));
        for (size_t j_1__ = 0; j_1__ < d_tau_err_j_1_max__; ++j_1__) {
            d_tau_err(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(d_tau_err);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable d_tau_err: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 50;
        if (!(context__.contains_r("xi_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable xi_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("xi_raw");
        pos__ = 0U;
        validate_non_negative_index("xi_raw", "M", M);
        context__.validate_dims("parameter initialization", "xi_raw", "vector_d", context__.to_vec(M));
        Eigen::Matrix<double, Eigen::Dynamic, 1> xi_raw(M);
        size_t xi_raw_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < xi_raw_j_1_max__; ++j_1__) {
            xi_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(xi_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable xi_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 51;
        if (!(context__.contains_r("zeta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta_raw");
        pos__ = 0U;
        validate_non_negative_index("zeta_raw", "N", N);
        context__.validate_dims("parameter initialization", "zeta_raw", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta_raw(N);
        size_t zeta_raw_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < zeta_raw_j_1_max__; ++j_1__) {
            zeta_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(zeta_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 52;
        if (!(context__.contains_r("theta_epsilon_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_epsilon_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_epsilon_raw");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_epsilon_raw", "double", context__.to_vec());
        double theta_epsilon_raw(0);
        theta_epsilon_raw = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, theta_epsilon_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_epsilon_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 53;
        if (!(context__.contains_r("theta_upsilon")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_upsilon missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_upsilon");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_upsilon", "double", context__.to_vec());
        double theta_upsilon(0);
        theta_upsilon = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, theta_upsilon);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_upsilon: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 54;
        if (!(context__.contains_r("psi_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_raw");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_raw", "double", context__.to_vec());
        double psi_raw(0);
        psi_raw = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, psi_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 55;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 43;
            local_scalar_t__ nu;
            (void) nu;  // dummy to suppress unused var warning
            if (jacobian__)
                nu = in__.scalar_constrain(lp__);
            else
                nu = in__.scalar_constrain();
            current_statement_begin__ = 44;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> epsilon_raw;
            (void) epsilon_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                epsilon_raw = in__.vector_constrain(L, lp__);
            else
                epsilon_raw = in__.vector_constrain(L);
            current_statement_begin__ = 45;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> upsilon_raw;
            (void) upsilon_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                upsilon_raw = in__.vector_constrain(I, lp__);
            else
                upsilon_raw = in__.vector_constrain(I);
            current_statement_begin__ = 46;
            local_scalar_t__ d_tau_raw;
            (void) d_tau_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                d_tau_raw = in__.scalar_constrain(lp__);
            else
                d_tau_raw = in__.scalar_constrain();
            current_statement_begin__ = 47;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> d_tau_err;
            (void) d_tau_err;  // dummy to suppress unused var warning
            if (jacobian__)
                d_tau_err = in__.vector_constrain(std::max(0, (K - 2)), lp__);
            else
                d_tau_err = in__.vector_constrain(std::max(0, (K - 2)));
            current_statement_begin__ = 50;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> xi_raw;
            (void) xi_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                xi_raw = in__.vector_constrain(M, lp__);
            else
                xi_raw = in__.vector_constrain(M);
            current_statement_begin__ = 51;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zeta_raw;
            (void) zeta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta_raw = in__.vector_constrain(N, lp__);
            else
                zeta_raw = in__.vector_constrain(N);
            current_statement_begin__ = 52;
            local_scalar_t__ theta_epsilon_raw;
            (void) theta_epsilon_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_epsilon_raw = in__.scalar_lb_constrain(0, lp__);
            else
                theta_epsilon_raw = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 53;
            local_scalar_t__ theta_upsilon;
            (void) theta_upsilon;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_upsilon = in__.scalar_lb_constrain(0, lp__);
            else
                theta_upsilon = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 54;
            local_scalar_t__ psi_raw;
            (void) psi_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_raw = in__.scalar_lb_constrain(0, lp__);
            else
                psi_raw = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 55;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_lb_constrain(0, lp__);
            else
                phi = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 59;
            validate_non_negative_index("epsilon", "L", L);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> epsilon(L);
            stan::math::initialize(epsilon, DUMMY_VAR__);
            stan::math::fill(epsilon, DUMMY_VAR__);
            current_statement_begin__ = 60;
            validate_non_negative_index("delta", "I", I);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta(I);
            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta, DUMMY_VAR__);
            current_statement_begin__ = 61;
            validate_non_negative_index("tau", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau(K);
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            current_statement_begin__ = 62;
            validate_non_negative_index("xi", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> xi(M);
            stan::math::initialize(xi, DUMMY_VAR__);
            stan::math::fill(xi, DUMMY_VAR__);
            current_statement_begin__ = 63;
            validate_non_negative_index("eta", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta(N);
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            current_statement_begin__ = 64;
            local_scalar_t__ theta_epsilon;
            (void) theta_epsilon;  // dummy to suppress unused var warning
            stan::math::initialize(theta_epsilon, DUMMY_VAR__);
            stan::math::fill(theta_epsilon, DUMMY_VAR__);
            stan::math::assign(theta_epsilon,(logical_eq(L, 1) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>(theta_epsilon_raw) ));
            current_statement_begin__ = 65;
            local_scalar_t__ psi;
            (void) psi;  // dummy to suppress unused var warning
            stan::math::initialize(psi, DUMMY_VAR__);
            stan::math::fill(psi, DUMMY_VAR__);
            stan::math::assign(psi,(logical_eq(M, 1) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>(psi_raw) ));
            // transformed parameters block statements
            current_statement_begin__ = 66;
            stan::math::assign(epsilon, add(nu, multiply(theta_epsilon, epsilon_raw)));
            current_statement_begin__ = 67;
            stan::math::assign(delta, add(stan::model::rvalue(epsilon, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "epsilon"), multiply(theta_upsilon, upsilon_raw)));
            current_statement_begin__ = 68;
            if (as_bool(logical_eq(K, 1))) {
                current_statement_begin__ = 69;
                stan::math::assign(tau, transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(0).array())));
            } else if (as_bool(logical_gt(K, 1))) {
                {
                current_statement_begin__ = 75;
                validate_non_negative_index("d_tau", "(K - 1)", (K - 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> d_tau((K - 1));
                stan::math::initialize(d_tau, DUMMY_VAR__);
                stan::math::fill(d_tau, DUMMY_VAR__);
                stan::math::assign(d_tau,add((stan::math::log(2) + d_tau_raw), append_row(d_tau_err, 0)));
                current_statement_begin__ = 77;
                validate_non_negative_index("tau_raw", "K", K);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau_raw(K);
                stan::math::initialize(tau_raw, DUMMY_VAR__);
                stan::math::fill(tau_raw, DUMMY_VAR__);
                stan::math::assign(tau_raw,cumulative_sum(append_row(0, d_tau)));
                current_statement_begin__ = 79;
                stan::math::assign(tau, add(subtract(tau_raw, get_base1(tau_raw, K, "tau_raw", 1)), (0.5 * d_tau_raw)));
                }
            }
            current_statement_begin__ = 81;
            stan::math::assign(xi, multiply(psi, xi_raw));
            current_statement_begin__ = 82;
            stan::math::assign(eta, add(stan::model::rvalue(xi, stan::model::cons_list(stan::model::index_multi(mm), stan::model::nil_index_list()), "xi"), multiply(phi, zeta_raw)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 59;
            size_t epsilon_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < epsilon_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(epsilon(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: epsilon" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable epsilon: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 60;
            size_t delta_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(delta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: delta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable delta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 61;
            size_t tau_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(tau(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: tau" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable tau: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 62;
            size_t xi_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(xi(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: xi" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable xi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 63;
            size_t eta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(eta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: eta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 64;
            if (stan::math::is_uninitialized(theta_epsilon)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: theta_epsilon";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta_epsilon: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 65;
            if (stan::math::is_uninitialized(psi)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            current_statement_begin__ = 91;
            lp_accum__.add(std_normal_log<propto__>(nu));
            current_statement_begin__ = 92;
            lp_accum__.add(std_normal_log<propto__>(epsilon_raw));
            current_statement_begin__ = 93;
            lp_accum__.add(std_normal_log<propto__>(upsilon_raw));
            current_statement_begin__ = 94;
            lp_accum__.add(std_normal_log<propto__>(d_tau_raw));
            current_statement_begin__ = 95;
            lp_accum__.add(std_normal_log<propto__>(d_tau_err));
            current_statement_begin__ = 96;
            lp_accum__.add(std_normal_log<propto__>(xi_raw));
            current_statement_begin__ = 97;
            lp_accum__.add(std_normal_log<propto__>(zeta_raw));
            current_statement_begin__ = 98;
            lp_accum__.add(std_normal_log<propto__>(theta_epsilon_raw));
            current_statement_begin__ = 99;
            lp_accum__.add(std_normal_log<propto__>(theta_upsilon));
            current_statement_begin__ = 100;
            lp_accum__.add(std_normal_log<propto__>(psi_raw));
            current_statement_begin__ = 101;
            lp_accum__.add(std_normal_log<propto__>(phi));
            current_statement_begin__ = 102;
            for (int o = 1; o <= O; ++o) {
                {
                current_statement_begin__ = 103;
                int i(0);
                (void) i;  // dummy to suppress unused var warning
                stan::math::fill(i, std::numeric_limits<int>::min());
                stan::math::assign(i,get_base1(ii, o, "ii", 1));
                current_statement_begin__ = 104;
                int k(0);
                (void) k;  // dummy to suppress unused var warning
                stan::math::fill(k, std::numeric_limits<int>::min());
                stan::math::assign(k,get_base1(kk, i, "kk", 1));
                current_statement_begin__ = 105;
                int n(0);
                (void) n;  // dummy to suppress unused var warning
                stan::math::fill(n, std::numeric_limits<int>::min());
                stan::math::assign(n,get_base1(nn, o, "nn", 1));
                current_statement_begin__ = 106;
                local_scalar_t__ beta(DUMMY_VAR__);
                (void) beta;  // dummy to suppress unused var warning
                stan::math::initialize(beta, DUMMY_VAR__);
                stan::math::fill(beta, DUMMY_VAR__);
                stan::math::assign(beta,((logical_lt(n, 0) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(xi, -(n), "xi", 1)) : stan::math::promote_scalar<local_scalar_t__>(get_base1(eta, n, "eta", 1)) ) - get_base1(delta, i, "delta", 1)));
                current_statement_begin__ = 110;
                if (as_bool(logical_eq(k, 1))) {
                    current_statement_begin__ = 110;
                    lp_accum__.add(bernoulli_logit_log<propto__>(get_base1(y, o, "y", 1), beta));
                } else if (as_bool(logical_eq(k, K))) {
                    current_statement_begin__ = 111;
                    lp_accum__.add(rsm_lpmf<propto__>(get_base1(y, o, "y", 1), subtract(beta, tau), pstream__));
                } else {
                    current_statement_begin__ = 112;
                    lp_accum__.add(binomial_logit_log<propto__>(get_base1(y, o, "y", 1), k, beta));
                }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("nu");
        names__.push_back("epsilon_raw");
        names__.push_back("upsilon_raw");
        names__.push_back("d_tau_raw");
        names__.push_back("d_tau_err");
        names__.push_back("xi_raw");
        names__.push_back("zeta_raw");
        names__.push_back("theta_epsilon_raw");
        names__.push_back("theta_upsilon");
        names__.push_back("psi_raw");
        names__.push_back("phi");
        names__.push_back("epsilon");
        names__.push_back("delta");
        names__.push_back("tau");
        names__.push_back("xi");
        names__.push_back("eta");
        names__.push_back("theta_epsilon");
        names__.push_back("psi");
        names__.push_back("sigma");
        names__.push_back("theta");
        names__.push_back("testlet_difficulty");
        names__.push_back("item_difficulty");
        names__.push_back("thresholds");
        names__.push_back("group_ability");
        names__.push_back("person_ability");
        names__.push_back("prior_log_lik_testlet_difficulty");
        names__.push_back("prior_log_lik_item_difficulty");
        names__.push_back("prior_log_lik_group_ability");
        names__.push_back("prior_log_lik_person_ability");
        names__.push_back("y_rep");
        names__.push_back("log_lik");
        names__.push_back("log_lik_rep");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(std::max(0, (K - 2)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(O);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(O);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(O);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_raschdash_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double nu = in__.scalar_constrain();
        vars__.push_back(nu);
        Eigen::Matrix<double, Eigen::Dynamic, 1> epsilon_raw = in__.vector_constrain(L);
        size_t epsilon_raw_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < epsilon_raw_j_1_max__; ++j_1__) {
            vars__.push_back(epsilon_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> upsilon_raw = in__.vector_constrain(I);
        size_t upsilon_raw_j_1_max__ = I;
        for (size_t j_1__ = 0; j_1__ < upsilon_raw_j_1_max__; ++j_1__) {
            vars__.push_back(upsilon_raw(j_1__));
        }
        double d_tau_raw = in__.scalar_constrain();
        vars__.push_back(d_tau_raw);
        Eigen::Matrix<double, Eigen::Dynamic, 1> d_tau_err = in__.vector_constrain(std::max(0, (K - 2)));
        size_t d_tau_err_j_1_max__ = std::max(0, (K - 2));
        for (size_t j_1__ = 0; j_1__ < d_tau_err_j_1_max__; ++j_1__) {
            vars__.push_back(d_tau_err(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> xi_raw = in__.vector_constrain(M);
        size_t xi_raw_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < xi_raw_j_1_max__; ++j_1__) {
            vars__.push_back(xi_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta_raw = in__.vector_constrain(N);
        size_t zeta_raw_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < zeta_raw_j_1_max__; ++j_1__) {
            vars__.push_back(zeta_raw(j_1__));
        }
        double theta_epsilon_raw = in__.scalar_lb_constrain(0);
        vars__.push_back(theta_epsilon_raw);
        double theta_upsilon = in__.scalar_lb_constrain(0);
        vars__.push_back(theta_upsilon);
        double psi_raw = in__.scalar_lb_constrain(0);
        vars__.push_back(psi_raw);
        double phi = in__.scalar_lb_constrain(0);
        vars__.push_back(phi);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 59;
            validate_non_negative_index("epsilon", "L", L);
            Eigen::Matrix<double, Eigen::Dynamic, 1> epsilon(L);
            stan::math::initialize(epsilon, DUMMY_VAR__);
            stan::math::fill(epsilon, DUMMY_VAR__);
            current_statement_begin__ = 60;
            validate_non_negative_index("delta", "I", I);
            Eigen::Matrix<double, Eigen::Dynamic, 1> delta(I);
            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta, DUMMY_VAR__);
            current_statement_begin__ = 61;
            validate_non_negative_index("tau", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> tau(K);
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            current_statement_begin__ = 62;
            validate_non_negative_index("xi", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, 1> xi(M);
            stan::math::initialize(xi, DUMMY_VAR__);
            stan::math::fill(xi, DUMMY_VAR__);
            current_statement_begin__ = 63;
            validate_non_negative_index("eta", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> eta(N);
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            current_statement_begin__ = 64;
            double theta_epsilon;
            (void) theta_epsilon;  // dummy to suppress unused var warning
            stan::math::initialize(theta_epsilon, DUMMY_VAR__);
            stan::math::fill(theta_epsilon, DUMMY_VAR__);
            stan::math::assign(theta_epsilon,(logical_eq(L, 1) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>(theta_epsilon_raw) ));
            current_statement_begin__ = 65;
            double psi;
            (void) psi;  // dummy to suppress unused var warning
            stan::math::initialize(psi, DUMMY_VAR__);
            stan::math::fill(psi, DUMMY_VAR__);
            stan::math::assign(psi,(logical_eq(M, 1) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>(psi_raw) ));
            // do transformed parameters statements
            current_statement_begin__ = 66;
            stan::math::assign(epsilon, add(nu, multiply(theta_epsilon, epsilon_raw)));
            current_statement_begin__ = 67;
            stan::math::assign(delta, add(stan::model::rvalue(epsilon, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "epsilon"), multiply(theta_upsilon, upsilon_raw)));
            current_statement_begin__ = 68;
            if (as_bool(logical_eq(K, 1))) {
                current_statement_begin__ = 69;
                stan::math::assign(tau, transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(0).array())));
            } else if (as_bool(logical_gt(K, 1))) {
                {
                current_statement_begin__ = 75;
                validate_non_negative_index("d_tau", "(K - 1)", (K - 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> d_tau((K - 1));
                stan::math::initialize(d_tau, DUMMY_VAR__);
                stan::math::fill(d_tau, DUMMY_VAR__);
                stan::math::assign(d_tau,add((stan::math::log(2) + d_tau_raw), append_row(d_tau_err, 0)));
                current_statement_begin__ = 77;
                validate_non_negative_index("tau_raw", "K", K);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau_raw(K);
                stan::math::initialize(tau_raw, DUMMY_VAR__);
                stan::math::fill(tau_raw, DUMMY_VAR__);
                stan::math::assign(tau_raw,cumulative_sum(append_row(0, d_tau)));
                current_statement_begin__ = 79;
                stan::math::assign(tau, add(subtract(tau_raw, get_base1(tau_raw, K, "tau_raw", 1)), (0.5 * d_tau_raw)));
                }
            }
            current_statement_begin__ = 81;
            stan::math::assign(xi, multiply(psi, xi_raw));
            current_statement_begin__ = 82;
            stan::math::assign(eta, add(stan::model::rvalue(xi, stan::model::cons_list(stan::model::index_multi(mm), stan::model::nil_index_list()), "xi"), multiply(phi, zeta_raw)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t epsilon_j_1_max__ = L;
                for (size_t j_1__ = 0; j_1__ < epsilon_j_1_max__; ++j_1__) {
                    vars__.push_back(epsilon(j_1__));
                }
                size_t delta_j_1_max__ = I;
                for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                    vars__.push_back(delta(j_1__));
                }
                size_t tau_j_1_max__ = K;
                for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                    vars__.push_back(tau(j_1__));
                }
                size_t xi_j_1_max__ = M;
                for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
                    vars__.push_back(xi(j_1__));
                }
                size_t eta_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                    vars__.push_back(eta(j_1__));
                }
                vars__.push_back(theta_epsilon);
                vars__.push_back(psi);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 117;
            double sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            stan::math::assign(sigma,stan::math::sqrt((square(psi) + square(phi))));
            current_statement_begin__ = 118;
            double theta;
            (void) theta;  // dummy to suppress unused var warning
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            stan::math::assign(theta,stan::math::sqrt((square(theta_epsilon) + square(theta_upsilon))));
            current_statement_begin__ = 120;
            validate_non_negative_index("testlet_difficulty", "L", L);
            Eigen::Matrix<double, Eigen::Dynamic, 1> testlet_difficulty(L);
            stan::math::initialize(testlet_difficulty, DUMMY_VAR__);
            stan::math::fill(testlet_difficulty, DUMMY_VAR__);
            stan::math::assign(testlet_difficulty,divide(epsilon, sigma));
            current_statement_begin__ = 121;
            validate_non_negative_index("item_difficulty", "I", I);
            Eigen::Matrix<double, Eigen::Dynamic, 1> item_difficulty(I);
            stan::math::initialize(item_difficulty, DUMMY_VAR__);
            stan::math::fill(item_difficulty, DUMMY_VAR__);
            stan::math::assign(item_difficulty,divide(delta, sigma));
            current_statement_begin__ = 122;
            validate_non_negative_index("thresholds", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> thresholds(K);
            stan::math::initialize(thresholds, DUMMY_VAR__);
            stan::math::fill(thresholds, DUMMY_VAR__);
            stan::math::assign(thresholds,divide(tau, sigma));
            current_statement_begin__ = 123;
            validate_non_negative_index("group_ability", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, 1> group_ability(M);
            stan::math::initialize(group_ability, DUMMY_VAR__);
            stan::math::fill(group_ability, DUMMY_VAR__);
            stan::math::assign(group_ability,divide(xi, sigma));
            current_statement_begin__ = 124;
            validate_non_negative_index("person_ability", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> person_ability(N);
            stan::math::initialize(person_ability, DUMMY_VAR__);
            stan::math::fill(person_ability, DUMMY_VAR__);
            stan::math::assign(person_ability,divide(eta, sigma));
            current_statement_begin__ = 125;
            validate_non_negative_index("prior_log_lik_testlet_difficulty", "L", L);
            Eigen::Matrix<double, Eigen::Dynamic, 1> prior_log_lik_testlet_difficulty(L);
            stan::math::initialize(prior_log_lik_testlet_difficulty, DUMMY_VAR__);
            stan::math::fill(prior_log_lik_testlet_difficulty, DUMMY_VAR__);
            current_statement_begin__ = 126;
            validate_non_negative_index("prior_log_lik_item_difficulty", "I", I);
            Eigen::Matrix<double, Eigen::Dynamic, 1> prior_log_lik_item_difficulty(I);
            stan::math::initialize(prior_log_lik_item_difficulty, DUMMY_VAR__);
            stan::math::fill(prior_log_lik_item_difficulty, DUMMY_VAR__);
            current_statement_begin__ = 127;
            validate_non_negative_index("prior_log_lik_group_ability", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, 1> prior_log_lik_group_ability(M);
            stan::math::initialize(prior_log_lik_group_ability, DUMMY_VAR__);
            stan::math::fill(prior_log_lik_group_ability, DUMMY_VAR__);
            current_statement_begin__ = 128;
            validate_non_negative_index("prior_log_lik_person_ability", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> prior_log_lik_person_ability(N);
            stan::math::initialize(prior_log_lik_person_ability, DUMMY_VAR__);
            stan::math::fill(prior_log_lik_person_ability, DUMMY_VAR__);
            current_statement_begin__ = 129;
            validate_non_negative_index("y_rep", "O", O);
            std::vector<int> y_rep(O, int(0));
            stan::math::fill(y_rep, std::numeric_limits<int>::min());
            current_statement_begin__ = 130;
            validate_non_negative_index("log_lik", "O", O);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(O);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 131;
            validate_non_negative_index("log_lik_rep", "O", O);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik_rep(O);
            stan::math::initialize(log_lik_rep, DUMMY_VAR__);
            stan::math::fill(log_lik_rep, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 136;
            for (int l = 1; l <= L; ++l) {
                current_statement_begin__ = 137;
                stan::model::assign(prior_log_lik_testlet_difficulty, 
                            stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list()), 
                            normal_log(get_base1(testlet_difficulty, l, "testlet_difficulty", 1), (nu / sigma), (theta_epsilon / sigma)), 
                            "assigning variable prior_log_lik_testlet_difficulty");
            }
            current_statement_begin__ = 144;
            for (int i = 1; i <= I; ++i) {
                current_statement_begin__ = 145;
                stan::model::assign(prior_log_lik_item_difficulty, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_log(get_base1(item_difficulty, i, "item_difficulty", 1), (nu / sigma), (theta / sigma)), 
                            "assigning variable prior_log_lik_item_difficulty");
            }
            current_statement_begin__ = 152;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 153;
                stan::model::assign(prior_log_lik_group_ability, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            normal_log(get_base1(group_ability, m, "group_ability", 1), 0, (psi / sigma)), 
                            "assigning variable prior_log_lik_group_ability");
            }
            current_statement_begin__ = 156;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 157;
                stan::model::assign(prior_log_lik_person_ability, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            normal_log(get_base1(person_ability, n, "person_ability", 1), 0, 1), 
                            "assigning variable prior_log_lik_person_ability");
            }
            current_statement_begin__ = 160;
            for (int o = 1; o <= O; ++o) {
                {
                current_statement_begin__ = 161;
                int i(0);
                (void) i;  // dummy to suppress unused var warning
                stan::math::fill(i, std::numeric_limits<int>::min());
                stan::math::assign(i,get_base1(ii, o, "ii", 1));
                current_statement_begin__ = 162;
                int k(0);
                (void) k;  // dummy to suppress unused var warning
                stan::math::fill(k, std::numeric_limits<int>::min());
                stan::math::assign(k,get_base1(kk, i, "kk", 1));
                current_statement_begin__ = 163;
                int n(0);
                (void) n;  // dummy to suppress unused var warning
                stan::math::fill(n, std::numeric_limits<int>::min());
                stan::math::assign(n,get_base1(nn, o, "nn", 1));
                current_statement_begin__ = 164;
                local_scalar_t__ beta(DUMMY_VAR__);
                (void) beta;  // dummy to suppress unused var warning
                stan::math::initialize(beta, DUMMY_VAR__);
                stan::math::fill(beta, DUMMY_VAR__);
                stan::math::assign(beta,((logical_lt(n, 0) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(xi, -(n), "xi", 1)) : stan::math::promote_scalar<local_scalar_t__>(get_base1(eta, n, "eta", 1)) ) - get_base1(delta, i, "delta", 1)));
                current_statement_begin__ = 165;
                if (as_bool(logical_eq(k, 1))) {
                    current_statement_begin__ = 166;
                    stan::model::assign(y_rep, 
                                stan::model::cons_list(stan::model::index_uni(o), stan::model::nil_index_list()), 
                                bernoulli_logit_rng(beta, base_rng__), 
                                "assigning variable y_rep");
                    current_statement_begin__ = 167;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(o), stan::model::nil_index_list()), 
                                bernoulli_logit_log(get_base1(y, o, "y", 1), beta), 
                                "assigning variable log_lik");
                    current_statement_begin__ = 168;
                    stan::model::assign(log_lik_rep, 
                                stan::model::cons_list(stan::model::index_uni(o), stan::model::nil_index_list()), 
                                bernoulli_logit_log(get_base1(y_rep, o, "y_rep", 1), beta), 
                                "assigning variable log_lik_rep");
                } else if (as_bool(logical_eq(k, K))) {
                    current_statement_begin__ = 170;
                    stan::model::assign(y_rep, 
                                stan::model::cons_list(stan::model::index_uni(o), stan::model::nil_index_list()), 
                                rsm_rng(subtract(beta, tau), base_rng__, pstream__), 
                                "assigning variable y_rep");
                    current_statement_begin__ = 171;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(o), stan::model::nil_index_list()), 
                                rsm_lpmf(get_base1(y, o, "y", 1), subtract(beta, tau), pstream__), 
                                "assigning variable log_lik");
                    current_statement_begin__ = 172;
                    stan::model::assign(log_lik_rep, 
                                stan::model::cons_list(stan::model::index_uni(o), stan::model::nil_index_list()), 
                                rsm_lpmf(get_base1(y_rep, o, "y_rep", 1), subtract(beta, tau), pstream__), 
                                "assigning variable log_lik_rep");
                } else {
                    current_statement_begin__ = 174;
                    stan::model::assign(y_rep, 
                                stan::model::cons_list(stan::model::index_uni(o), stan::model::nil_index_list()), 
                                binomial_rng(k, inv_logit(beta), base_rng__), 
                                "assigning variable y_rep");
                    current_statement_begin__ = 175;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(o), stan::model::nil_index_list()), 
                                binomial_logit_log(get_base1(y, o, "y", 1), k, beta), 
                                "assigning variable log_lik");
                    current_statement_begin__ = 176;
                    stan::model::assign(log_lik_rep, 
                                stan::model::cons_list(stan::model::index_uni(o), stan::model::nil_index_list()), 
                                binomial_logit_log(get_base1(y_rep, o, "y_rep", 1), k, beta), 
                                "assigning variable log_lik_rep");
                }
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 117;
            check_greater_or_equal(function__, "sigma", sigma, 0);
            vars__.push_back(sigma);
            current_statement_begin__ = 118;
            check_greater_or_equal(function__, "theta", theta, 0);
            vars__.push_back(theta);
            current_statement_begin__ = 120;
            size_t testlet_difficulty_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < testlet_difficulty_j_1_max__; ++j_1__) {
                vars__.push_back(testlet_difficulty(j_1__));
            }
            current_statement_begin__ = 121;
            size_t item_difficulty_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < item_difficulty_j_1_max__; ++j_1__) {
                vars__.push_back(item_difficulty(j_1__));
            }
            current_statement_begin__ = 122;
            size_t thresholds_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < thresholds_j_1_max__; ++j_1__) {
                vars__.push_back(thresholds(j_1__));
            }
            current_statement_begin__ = 123;
            size_t group_ability_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < group_ability_j_1_max__; ++j_1__) {
                vars__.push_back(group_ability(j_1__));
            }
            current_statement_begin__ = 124;
            size_t person_ability_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < person_ability_j_1_max__; ++j_1__) {
                vars__.push_back(person_ability(j_1__));
            }
            current_statement_begin__ = 125;
            size_t prior_log_lik_testlet_difficulty_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < prior_log_lik_testlet_difficulty_j_1_max__; ++j_1__) {
                vars__.push_back(prior_log_lik_testlet_difficulty(j_1__));
            }
            current_statement_begin__ = 126;
            size_t prior_log_lik_item_difficulty_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < prior_log_lik_item_difficulty_j_1_max__; ++j_1__) {
                vars__.push_back(prior_log_lik_item_difficulty(j_1__));
            }
            current_statement_begin__ = 127;
            size_t prior_log_lik_group_ability_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < prior_log_lik_group_ability_j_1_max__; ++j_1__) {
                vars__.push_back(prior_log_lik_group_ability(j_1__));
            }
            current_statement_begin__ = 128;
            size_t prior_log_lik_person_ability_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < prior_log_lik_person_ability_j_1_max__; ++j_1__) {
                vars__.push_back(prior_log_lik_person_ability(j_1__));
            }
            current_statement_begin__ = 129;
            size_t y_rep_i_0_max__ = O;
            for (size_t i_0__ = 0; i_0__ < y_rep_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y_rep[i_0__]", y_rep[i_0__], 0);
            }
            size_t y_rep_k_0_max__ = O;
            for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
                vars__.push_back(y_rep[k_0__]);
            }
            current_statement_begin__ = 130;
            size_t log_lik_j_1_max__ = O;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 131;
            size_t log_lik_rep_j_1_max__ = O;
            for (size_t j_1__ = 0; j_1__ < log_lik_rep_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik_rep(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_raschdash";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "nu";
        param_names__.push_back(param_name_stream__.str());
        size_t epsilon_raw_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < epsilon_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "epsilon_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t upsilon_raw_j_1_max__ = I;
        for (size_t j_1__ = 0; j_1__ < upsilon_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "upsilon_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "d_tau_raw";
        param_names__.push_back(param_name_stream__.str());
        size_t d_tau_err_j_1_max__ = std::max(0, (K - 2));
        for (size_t j_1__ = 0; j_1__ < d_tau_err_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "d_tau_err" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t xi_raw_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < xi_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zeta_raw_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < zeta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_epsilon_raw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_upsilon";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_raw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t epsilon_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < epsilon_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "epsilon" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t delta_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t tau_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t xi_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_epsilon";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta";
        param_names__.push_back(param_name_stream__.str());
        size_t testlet_difficulty_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < testlet_difficulty_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "testlet_difficulty" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t item_difficulty_j_1_max__ = I;
        for (size_t j_1__ = 0; j_1__ < item_difficulty_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "item_difficulty" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t thresholds_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < thresholds_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "thresholds" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t group_ability_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < group_ability_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "group_ability" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t person_ability_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < person_ability_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "person_ability" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t prior_log_lik_testlet_difficulty_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < prior_log_lik_testlet_difficulty_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prior_log_lik_testlet_difficulty" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t prior_log_lik_item_difficulty_j_1_max__ = I;
        for (size_t j_1__ = 0; j_1__ < prior_log_lik_item_difficulty_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prior_log_lik_item_difficulty" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t prior_log_lik_group_ability_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < prior_log_lik_group_ability_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prior_log_lik_group_ability" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t prior_log_lik_person_ability_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < prior_log_lik_person_ability_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prior_log_lik_person_ability" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_rep_k_0_max__ = O;
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = O;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_rep_j_1_max__ = O;
        for (size_t j_1__ = 0; j_1__ < log_lik_rep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik_rep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "nu";
        param_names__.push_back(param_name_stream__.str());
        size_t epsilon_raw_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < epsilon_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "epsilon_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t upsilon_raw_j_1_max__ = I;
        for (size_t j_1__ = 0; j_1__ < upsilon_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "upsilon_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "d_tau_raw";
        param_names__.push_back(param_name_stream__.str());
        size_t d_tau_err_j_1_max__ = std::max(0, (K - 2));
        for (size_t j_1__ = 0; j_1__ < d_tau_err_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "d_tau_err" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t xi_raw_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < xi_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zeta_raw_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < zeta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_epsilon_raw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_upsilon";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_raw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t epsilon_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < epsilon_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "epsilon" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t delta_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t tau_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t xi_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < xi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_epsilon";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta";
        param_names__.push_back(param_name_stream__.str());
        size_t testlet_difficulty_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < testlet_difficulty_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "testlet_difficulty" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t item_difficulty_j_1_max__ = I;
        for (size_t j_1__ = 0; j_1__ < item_difficulty_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "item_difficulty" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t thresholds_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < thresholds_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "thresholds" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t group_ability_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < group_ability_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "group_ability" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t person_ability_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < person_ability_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "person_ability" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t prior_log_lik_testlet_difficulty_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < prior_log_lik_testlet_difficulty_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prior_log_lik_testlet_difficulty" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t prior_log_lik_item_difficulty_j_1_max__ = I;
        for (size_t j_1__ = 0; j_1__ < prior_log_lik_item_difficulty_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prior_log_lik_item_difficulty" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t prior_log_lik_group_ability_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < prior_log_lik_group_ability_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prior_log_lik_group_ability" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t prior_log_lik_person_ability_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < prior_log_lik_person_ability_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prior_log_lik_person_ability" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_rep_k_0_max__ = O;
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = O;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_rep_j_1_max__ = O;
        for (size_t j_1__ = 0; j_1__ < log_lik_rep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik_rep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_raschdash_namespace::model_raschdash stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
